CREATE OR REPLACE PROCEDURE SIM_BOM.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN()
  RETURNS VARCHAR
  LANGUAGE SQL
  AS
  $$
  BEGIN
      -- Merge into T_ITEM_DETAIL_ROOT
     MERGE INTO SIM_BOM.BMATHUB_BASE.T_ITEM_DETAIL_ROOT AS TARGET
      USING (
          SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, ITEM_DSC, DELETE_IND
          FROM (
              SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, ITEM_DSC, DELETE_IND,
                     ROW_NUMBER() OVER (PARTITION BY INPUT_ITEM_ID ORDER BY INPUT_ITEM_ID desc) AS rn
              FROM SIM_BOM.MASTER_DATA.ITEM
          ) WHERE rn = 1
      ) AS SOURCE
      ON (SOURCE.INPUT_ITEM_ID = TARGET.ITEM_ID)
      WHEN MATCHED THEN
          UPDATE SET 
              TARGET.ITEM_CLASS_NM = SOURCE.ITEM_CLASS_NM,
              TARGET.ITEM_DSC = SOURCE.ITEM_DSC,
              TARGET.DELETE_IND = SOURCE.DELETE_IND
      WHEN NOT MATCHED THEN
          INSERT (ITEM_ID, ITEM_CLASS_NM, ITEM_DSC, DELETE_IND)
          VALUES (SOURCE.INPUT_ITEM_ID, SOURCE.ITEM_CLASS_NM, SOURCE.ITEM_DSC, SOURCE.DELETE_IND);

      -- Merge into T_ITEM_LOCATION_ROOT
      MERGE INTO SIM_BOM.BMATHUB_BASE.T_ITEM_LOCATION_ROOT AS TARGET
      USING (
          SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, LOCATION_ID
          FROM (
              SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, LOCATION_ID,
                     ROW_NUMBER() OVER (PARTITION BY INPUT_ITEM_ID, LOCATION_ID ORDER BY INPUT_ITEM_ID desc) AS rn
              FROM SIM_BOM.MASTER_DATA.LOCATION
          ) WHERE rn = 1
      ) AS SOURCE
      ON (SOURCE.INPUT_ITEM_ID = TARGET.ITEM_ID AND SOURCE.LOCATION_ID = TARGET.LOCATION_ID)
      WHEN MATCHED THEN
          UPDATE SET 
              TARGET.ITEM_CLASS = SOURCE.ITEM_CLASS_NM,
              TARGET.LOCATION_ID = SOURCE.LOCATION_ID
      WHEN NOT MATCHED THEN
          INSERT (ITEM_ID, ITEM_CLASS, LOCATION_ID)
          VALUES (SOURCE.INPUT_ITEM_ID, SOURCE.ITEM_CLASS_NM, SOURCE.LOCATION_ID);

      -- Merge into T_ORIG_BOM
      MERGE INTO SIM_BOM.BMATHUB_BASE.T_ORIG_BOM AS TARGET
      USING (
        SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, LOC
        FROM (
            SELECT INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, LOC,
               ROW_NUMBER() OVER (PARTITION BY INPUT_ITEM_ID ORDER BY INPUT_ITEM_ID desc) AS rn
            FROM SIM_BOM.MASTER_DATA.ORIG_BOM
            )
        WHERE rn = 1  -- Select only one row per INPUT_ITEM_ID
    ) AS SOURCE
      ON (SOURCE.INPUT_ITEM_ID = TARGET.INPUT_ITEM_ID)
      WHEN MATCHED THEN
          UPDATE SET 
              TARGET.ITEM_CLASS_NM = SOURCE.ITEM_CLASS_NM,
              TARGET.OUTPUT_ITEM_ID = SOURCE.OUTPUT_ITEM_ID,
              TARGET.LOCATION_ID = SOURCE.LOC
      WHEN NOT MATCHED THEN
          INSERT (INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, LOCATION_ID)
          VALUES (SOURCE.INPUT_ITEM_ID, SOURCE.ITEM_CLASS_NM, SOURCE.OUTPUT_ITEM_ID, SOURCE.LOC);

    RETURN 'Merge operation completed successfully';
  END;
  $$
  ;


CALL SIM_BOM.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN();



select * from SIM_BOM.BMATHUB_BASE.T_ITEM_DETAIL_ROOT;
select * from SIM_BOM.MASTER_DATA.ITEM;

truncate table SIM_BOM.MASTER_DATA.ITEM;